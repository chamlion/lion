FixedBuffer  
  --char data_[SIZE]  保存数据
  --char* cur_   指向当前数据尾部所在位置
  --append(const char* buf, size_t len) buffer中添加数据
  --current()  cur_指针当前所在位置
  --toString     将buffer中的数据以string类型返回
  --length()     buffer中保存的数据长度 
  --avail()      buffer中可用空间
  --bzero()      buffer 清零
LogStream   
  --Buffer采用的是FixedBuffer 
  -- >>   重载"<<"运算符，将数据输出到buffer中
  -- void formatInteger(T) 调用convert，将将数字转换为string，并写入到buffer
  -- ～Buffer()输出buffer中的数据到指定文件或流，然后flush
int len = snprintf(buffer_.current(), kMaxNumericSize, "%.12g", v);
将浮点数格式化输出到buffer中

Logger 
  -- SourceFile  包含的类
          -- char* data_ 文件名指针，strrchr(data_, '/')关键点
  -- Impl  包含的类  在logger类的构造函数中，初始化Impl类
          -- Impl() 调用LogStream对象输出当前所在线程，日志级别，时间信息
          -- 
  -- setLogLevel() 设置日志输出级别
  -- getLogLevel() 得到当前日志输出级别
  -- setOutput() 设置输出函数
  -- setFlush()  设置flush函数
  -- defaultOutput()写入stdout 
     关键语句fwrite(msg, 1, len, stdout);
  -- DefualtFlush() flush stdout  关键语句fflush(stdout); 
  -- stream() 返回LogStream类型对象，该对象声明在Impl中
#define LOG_INFO if (muduo::Logger::logLevel() <= muduo::Logger::INFO) \
  muduo::Logger(__FILE__, __LINE__).stream()     
__FILE__, __LINE__ 当前文件名以及行    

完整的使用 





















 

